{"version":3,"sources":["utils/IntersectionObserver.js","components/Album.js","App.js","reportWebVitals.js","index.js"],"names":["observer","listenerCallbacks","WeakMap","handleIntersections","entries","forEach","entry","has","target","cb","get","isIntersecting","intersectionRatio","unobserve","delete","getIntersectionObserver","undefined","IntersectionObserver","rootMargin","threshold","Album","elem","callback","id","title","userId","imagesPerRow","useState","images","setImages","pageNumber","setPageNumber","albumRef","React","useRef","fetch","then","res","json","response","catch","error","console","useEffect","current","set","observe","className","ref","onClick","previousPageNumber","style","justifyContent","Math","ceil","length","slice","min","map","image","src","url","App","albums","setAlbums","setImagesPerRow","useLayoutEffect","handleWindowResize","floor","window","innerWidth","addEventListener","removeEventListener","max","useImagesPerRow","alert","album","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1d0b6619.chunk.js","sourcesContent":["import { useEffect } from \"react\";\n\nlet listenerCallbacks = new WeakMap();\nlet observer;\n\nfunction handleIntersections(entries) {\n  entries.forEach((entry) => {\n    if (listenerCallbacks.has(entry.target)) {\n      let cb = listenerCallbacks.get(entry.target);\n      if (entry.isIntersecting || entry.intersectionRatio > 0) {\n        observer.unobserve(entry.target);\n        listenerCallbacks.delete(entry.target);\n        cb();\n      }\n    }\n  });\n}\n\nfunction getIntersectionObserver() {\n  if (observer === undefined) {\n    observer = new IntersectionObserver(handleIntersections, {\n      rootMargin: \"100px\",\n      threshold: \"0.15\"\n    });\n  }\n  return observer;\n}\n\nexport function useIntersection(elem, callback) {\n  useEffect(() => {\n    let target = elem.current;\n    let observer = getIntersectionObserver();\n    listenerCallbacks.set(target, callback);\n    observer.observe(target);\n    return () => {\n      listenerCallbacks.delete(target);\n      observer.unobserve(target);\n    };\n  }, []);\n}\n","import React, {useState} from \"react\";\nimport { useIntersection } from \"../utils/IntersectionObserver\";\nimport \"./Album.scss\";\n\nfunction Album({id, title, userId, imagesPerRow}){\n  const [images, setImages] = useState([]);\n  const [pageNumber, setPageNumber] = useState(0);\n\n  const albumRef = React.useRef();\n\n  useIntersection(albumRef, () => {\n    fetch(`https://jsonplaceholder.typicode.com/photos?albumId=${id}`)\n      .then(res => res.json())\n      .then(response => {\n        setImages(response);\n        setPageNumber(1);\n      })\n      .catch(error => {\n        console.error(error);\n      });\n  })\n\n  return(\n    <div className=\"albumContainer\" ref={albumRef}>\n      <div className=\"titleSection\">{title}</div>\n      <div className=\"infoSection\">\n        id: {id}, userId: {userId}\n      </div>\n      <div className=\"carouselContainer\">\n        <div\n          className={`leftArrow ${(pageNumber===1)||(pageNumber===0)?\"arrowDisabled\":\"\"}`}\n          onClick={()=>{setPageNumber(previousPageNumber => previousPageNumber-1)}}\n        ></div>\n        <div\n          className=\"imagesSection\"\n          style={{\n            justifyContent: pageNumber===Math.ceil(images.length/imagesPerRow)?\"flex-start\":\"space-between\"\n          }}\n        >\n          {\n            pageNumber!==0 &&\n            images.length!==0 &&\n            images.slice(imagesPerRow*(pageNumber-1), Math.min(imagesPerRow*pageNumber, images.length)).map(image => (\n              <div className=\"imageSection\" key={`album-${id}-image-${image.id}`}>\n                <img\n                  src={image.url}\n                  className=\"imageContainer\"\n                />\n                <div className=\"imageTitle\">{image.title}</div>\n                <div className=\"imageId\">id: {image.id}</div>\n              </div>\n            ))\n          }\n        </div>\n        <div \n          className={`rightArrow ${(pageNumber===Math.ceil(images.length/imagesPerRow))||(images.length===0)?\"arrowDisabled\":\"\"}`}\n          onClick={()=>{setPageNumber(previousPageNumber => previousPageNumber+1)}}\n        ></div>\n      </div>\n    </div>\n  );\n}\n\nexport default Album;","import React, {useLayoutEffect, useState, useEffect} from \"react\";\nimport Album from \"./components/Album\";\nimport \"./App.css\";\n\nfunction useImagesPerRow() {\n  const [imagesPerRow, setImagesPerRow] = useState(1);\n  useLayoutEffect(() => {\n    function handleWindowResize() {\n      setImagesPerRow(Math.floor((window.innerWidth-90)/200));\n    }\n    window.addEventListener('resize', handleWindowResize);\n    handleWindowResize();\n    return () => window.removeEventListener('resize', handleWindowResize);\n  }, []);\n  return Math.max(imagesPerRow, 1);\n}\n\nfunction App() {\n  const [albums, setAlbums] = useState([]);\n  const imagesPerRow = useImagesPerRow();\n\n  useEffect(function(){\n    fetch(\"https://jsonplaceholder.typicode.com/albums\")\n      .then(res => res.json())\n      .then(response => {\n        setAlbums(response);\n      })\n      .catch(error => {\n        alert(\"Something went wrong. Please try after some time\");\n        console.error(error);\n      })\n  },[])\n\n  return (\n    <div className=\"App\">\n      {\n        albums.map(album => (\n          <div className=\"albumRow\" key={`album-${album.id}`}>\n            <Album\n              id={album.id}\n              title={album.title}\n              userId={album.userId}\n              imagesPerRow={imagesPerRow}\n            />\n          </div>\n        ))\n      }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}