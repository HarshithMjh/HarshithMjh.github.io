{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","basicHtml","handleLivePreviewChanged","setState","livePreview","state","codeForIframe","codeForEditor","handleEditorChangedCode","newCode","handleRunClicked","handleDownloadClicked","element","document","createElement","file","Blob","type","href","URL","createObjectURL","download","body","appendChild","click","remove","handleThemeChanged","isChecked","theme","className","this","Button","variant","color","size","onClick","Checkbox","checked","disableRipple","disabled","onChange","Grid","container","item","xs","lg","mode","name","width","height","value","title","srcDoc","style","backgroundColor","border","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.041a2717.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Grid, Checkbox, Button } from \"@material-ui/core\";\nimport PlayCircleFilledIcon from '@material-ui/icons/PlayCircleFilled';\nimport GetAppIcon from \"@material-ui/icons/GetApp\";\nimport AceEditor from \"react-ace\";\nimport DarkModeToggle from \"react-dark-mode-toggle\";\nimport \"ace-builds/src-noconflict/mode-html\";\nimport \"ace-builds/src-noconflict/theme-chrome\";\nimport \"ace-builds/src-noconflict/theme-chaos\";\n\nimport \"./App.scss\";\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      theme: \"light\",\n      livePreview: false,\n      codeForIframe: \"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>Page Title</title>\\n    <style>\\n        body {\\n            background-color: black;\\n            text-align: center;\\n            color: white;\\n            font-family: Arial, Helvetica, sans-serif;\\n        }\\n    </style>\\n</head>\\n<body>\\n    <h1>This is a Heading</h1>\\n    <p>This is a paragraph.</p>\\n    <p>Edit the code in the window to the left, and click \\\"Run\\\" to view the result.</p>\\n    <img src=\\\"https://www.w3schools.com/tryit/avatar.png\\\" alt=\\\"Avatar\\\" style=\\\"width:200px\\\">\\n</body>\\n</html>\\n\",\n      codeForEditor: \"<!DOCTYPE html>\\n<html>\\n<head>\\n    <title>Page Title</title>\\n    <style>\\n        body {\\n            background-color: black;\\n            text-align: center;\\n            color: white;\\n            font-family: Arial, Helvetica, sans-serif;\\n        }\\n    </style>\\n</head>\\n<body>\\n    <h1>This is a Heading</h1>\\n    <p>This is a paragraph.</p>\\n    <p>Edit the code in the window to the left, and click \\\"Run\\\" to view the result.</p>\\n    <img src=\\\"https://www.w3schools.com/tryit/avatar.png\\\" alt=\\\"Avatar\\\" style=\\\"width:200px\\\">\\n</body>\\n</html>\\n\"\n    };\n  }\n\n  basicHtml = \"<!DOCTYPE html>\\n<html>\\n<head>\\n    \\n</head>\\n<body>\\n    Type here\\n</body>\\n</html>\\n\";\n\n  handleLivePreviewChanged = () => {\n    this.setState({\n      livePreview: !this.state.livePreview\n    });\n    if(true){\n      this.setState({\n        codeForIframe: this.state.codeForEditor\n      });\n    }\n  }\n\n  handleEditorChangedCode = (newCode) => {\n    this.setState({\n      codeForEditor: newCode\n    });\n    if(this.state.livePreview){\n      this.setState({\n        codeForIframe: newCode\n      });\n    }\n  }\n\n  handleRunClicked = () => {\n    this.setState({\n      codeForIframe: this.state.codeForEditor\n    });\n  }\n\n  handleDownloadClicked = () => {\n    const element = document.createElement(\"a\");\n    const file = new Blob([this.state.codeForEditor], {type: 'text/plain'});\n    element.href = URL.createObjectURL(file);\n    element.download = \"download.txt\";\n    document.body.appendChild(element);\n    element.click();\n    element.remove();\n  }\n\n  handleThemeChanged = (isChecked) => {\n    this.setState({\n      theme: isChecked?\"dark\":\"light\"\n    });\n  }\n\n  render(){\n    return (\n      <div className={`App ${this.state.theme}-theme`}>\n        <div className=\"appHeader\">\n          <div className=\"livePreviewButton\">\n            <Button\n              variant=\"outlined\"\n              color=\"inherit\"\n              size=\"small\"\n              onClick={this.handleLivePreviewChanged}\n            >\n              Live Preview\n              <Checkbox\n                checked={this.state.livePreview}\n                size=\"small\"\n                className=\"livePreviewCheckboox\"\n                disableRipple={true}\n                color=\"inherit\"\n              />\n            </Button>\n          </div>\n          <div className=\"separator\"/>\n          <div className=\"downloadIconContainer\">\n            <Button\n              variant=\"outlined\"\n              color=\"inherit\"\n              size=\"small\"\n              onClick={this.handleDownloadClicked}\n            >\n              Download\n              <GetAppIcon\n                className=\"downloadIcon\"\n              />\n            </Button>\n          </div>\n          <div className=\"separator\"/>\n          <div className=\"runButton\">\n            <Button\n              variant=\"outlined\"\n              color=\"inherit\"\n              size=\"small\"\n              disabled={this.state.livePreview}\n              onClick={this.handleRunClicked}\n            >\n              Run\n              <PlayCircleFilledIcon\n                className=\"runIcon\"\n              />\n            </Button>\n          </div>\n          <div className=\"themeToggleContainer\">\n            <DarkModeToggle\n              onChange={this.handleThemeChanged}\n              checked={this.state.theme===\"dark\"}\n              size={45}\n            />\n          </div>\n          <div className=\"separator\"/>\n        </div>\n        <div className=\"appBody\">\n          <Grid container className=\"gridConatiner\">\n            <Grid item xs={12} lg={6} className=\"gridElement\">\n              <div className=\"editorContainer\">\n                <AceEditor\n                  mode=\"html\"\n                  theme={this.state.theme===\"light\"?\"chrome\":\"chaos\"}\n                  name=\"html-code-editor\"\n                  width=\"100%\"\n                  height=\"100%\"\n                  value={this.state.codeForEditor}\n                  onChange={this.handleEditorChangedCode}\n                />\n              </div>\n            </Grid>\n            <Grid item xs={12} lg={6} className=\"gridElement\">\n              <div className=\"iframeContainer\">\n                <iframe\n                  title=\"editor iframe\"\n                  srcDoc={this.state.codeForIframe}\n                  width=\"100%\"\n                  height=\"100%\"\n                  style={{\n                    backgroundColor: \"#fff\",\n                    border: \"none\"\n                  }}\n                />\n              </div>\n            </Grid>\n          </Grid>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}